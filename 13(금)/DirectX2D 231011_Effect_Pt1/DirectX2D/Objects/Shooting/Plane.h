#pragma once

// 비행기 : 트랜스폼을 가진 게임오브젝트를 가진 쿼드를 가진... 최종 클래스

class Plane : public Quad
{
public:
    Plane();
    ~Plane();

    void Update();
    void Render();

    Collider* GetCollider() { return collider; } //외부에서 개입이 필요할 경우 콜라이더 주기

private:
    // 비행기 움직이기
    void Move();    //위치이동
    void Rotate();  //회전
    
    void Crash(); // 이 비행기가 다른 물체와 충돌이 일어난 경우

    // 총을 쏘기
    void Fire();

    // 플레이어를 위한 충돌체
    Collider* collider;


    // 포탑 선언

    // 정석 : 클래스 만들기 : 별도의 클래스를 만들고 거기서 총알 호출
    
    // 꼼수 : 어차피 같은 코드를 쓸 텐데... 굳이 클래스까지??
    //        -> 트랜스폼을 하나 더 만든 다음, 호출은 여기서 해도 되지 않을까?
    //        -> 자식 트랜스폼을 만들고, 제어를 부모가 한다

    // 이번에는 꼼수의 방식으로

    Quad* turret; // <포탑의 모양을 가지는 트랜스폼 하나 그냥 만들기
    //               (기능은 없고 다만 움직임만 따로 할 수 있는, 폼으로 있는 변수)

    // * "객체 지향"이라는 취지에서 벗어난 코딩이라는 의미에서 꼼수라는 지칭을 쓰고는 있지만
    //   경우에 따라서는, 특히 게임에서는 이런 식으로 한 클래스가 자기 영역 안에 있는 모든 기능을
    //   온전히 갖고 있어주는 편이 더 편리하거나 효율적일 수도 있다!

    // * 클래스를 따로 만들었더라도 코드가 크게 달라지진 않을 것 (적어도 지금은)
    //   어차피 불릿 매니저의 Fire를 플레이어가 아닌 터렛이 호출하는 거니까

    bool log = false;
};

