#pragma once
#include <iostream>

class Human
{
protected:
	// 변수를 만들려니, 자식 클래스(=직업)마다 개성이 강할 것 같아서
	// 변수 만들기가 애매해졌다
	// 그러므로 만들지 말자

public:
	// 변수가 없는 대신, 이번에는 public 함수에 공용 함수를 넣자
	// 여기서 "공용 함수"에는 몇 가지 추가 문법이 들어간다
	virtual void Live() = 0;
	// Virtual : 자료형 앞에 붙는 함수의 수정 키워드, 수정 연산자(수정자)
	//			 뜻은 "이 함수는 오버라이드 되거나, 다른 함수를 오버라이드 한 결과로만 쓸 수 있다"라는 뜻
	//			 다시 말해, 자기가 다른 함수의 사본이거나 다른 함수가 자기를 참조해야만 한다는 선언
	//			 이런 식으로 한쪽이 다른 한쪽을 오버라이드해야 하는 함수쌍을 "가상 함수"라고 한다
	//			 (한쪽, 그러니까 원본 쪽이 실제로는 내용이 없는 "가상"이라는 의미)

	// 함수 뒤에 붙은 = 0 : "이 함수는 안에 내용이 정말로, 아무 것도 없습니다!"라는 완전한 선언(confirmation)
	//						 일반적으로 함수 명칭 뒤에 ;만 붙으면 → "어딘가에서 정의를 해주겠지"
	//						 {}가 있는데 내용이 없으면 → 나중에 수정을 해주겠지...라고 누구나 생각한다
	//						 = 0를 붙이면 → 진짜 여기는 아무것도 안 넣을 거라는 뜻
	//						 정말 아무것도 없어서, 심지어 이대로는 호출도 못 한다

	// 요약하면 : 위의 Live() = 0; 라는 선언으로 두 가지를 확실히 해둔 것
	//			  1. Human이라는 클래스는 반드시 자식 클래스가 있어야 한다(안 그러면 에러)
	//			  2. Human의 자식 클래스 역시 반드시 Live() 함수가 있어야 한다(그것도 정의가 끝까지 된)
	
	// 생성자
	Human() { }
};

