#include <iostream>

// 예시용 변수(설명은 아래 중간 참조)
// 전역 변수
int glb = 100;
float glbf = 100.5f;
char glbc = 'a';
// 위처럼 모든 {}바깥에서 변수를 만들면.....

int main()
{
    // 함수, 매개변수, 지역변수, 전역변수(+헤더 파일)

    // 함수, 매개변수 : 컴퓨터의 코드를 개발자가 임의로 행동단위에 따라 구분하여 분리한 것
    // 개발자의 의사에 따라 컴퓨터의 기능을 독립적으로 정의한 것

    // 프로그래밍을 한다는 것을 라면 끓이기에 비유한다면(라면 우화)

    // 라면을 사고, 냄비에 물을 끓이고, 라면을 넣고, 스프를 넣고 3분 뒤에 먹는다...는 것을 코드로 구현한 거라고도 본다
    
    // 이 때, "냄비에 물을 끓이고, 라면을 넣고, 스프를 넣고, 3분 기다린다"는 과정을 하나의 이름으로 묶는다
    // 이름하여 "라면 끓이기"

    // → 라면을 사고, 라면을 끓이고, 라면을 먹는다...로 평소에는 줄여서 이해하고,
    // 라면을 어떻게 끓이는데? 에서 자세한 행동을 지정해서 이해할 수 있게 된다

    // -------그런데 여기서--------

    // 천장에 라면이 없다면?

    // 1. 집에 라면 없네? 먹지말자! : 라면을 먹으려면 집에 라면이 있어야지!
    // 2. 슈퍼는 문 당았나? 가서 사오자! : 라면이 있으려면 어디서든 구해올 수 있어야 한다!

    // → 라면을 끓이려면 라면이 필요한데, 그 라면이 있는 위치가 혹은 우리가 손에 닿는 범위가
    // 어디까지인지가 코드의 수행 가능 여부에 영향을 준다

    // ------------------------------

    //프로그래밍이 라면 끓이기와 같다면 프로그래밍 언어의 변수는 곧 라면 자체

    // 라면의 위치가 어디 있느냐가 문제 : 변수에도 위치가 있어서 어디서 그 변수를 호출할 수 있느냐
    // 하는 부분이 중요하다는 뜻

    // -------------------------------

    // 여기서 생각 가능한, 변수 위치에 따른 구분

    // 구분의 기준 : {}의 안에 있느냐, 밖에 있느냐

    // 변수의 호출(참조) 원칙 : 자기가 있는 곳의, 자기보다 작은 {}까지는 개입 가능
    // 자기가 없는 곳, 혹은 자기가 있는 {} 바깥의 코드, 혹은 변수는 개입 불가능
    
    int a = 1; // 예시용 변수

    if (true) // 예시용 조건문
    {
        int b = 2;

        std::cout << a << std::endl; // 여기서 a 호출 가능(밖에서 만들어도 안에서 사용 가능)
        std::cout << b << std::endl; // b는 당연히 호출 가능(바로 위니까)
    }

    std::cout << a << std::endl; // 당연히 a 호출 가능
    // std::cout << b << std::endl; // b는 호출 불가능(b가 if문 안에서 만들어져서)

    switch (a) // 예시용 조건문 2
    {
    case 0:
    {
        int c = 0; // 잠재적인 에러를 품고 있다 : {}로 묶어야 에러 확률 0%

        break;
    }
     
    case 1:
        // 여기서는 c 호출하지 말 것
        break;
    }

    if (true) // 예시용 조건문 3
    {
        int d = 0;
    }
    else
    {
        // d = 1; // 오류, 자기가 없는 {}에서 d를 만들었기 때문에
        // c가 잠재적인 에러를 품었다는 것도 이 이유
    }

    // ---------------------------------

    // 변수의 참조 방향에 차이가 있을 때, 이 차이를 가장 극단적으로 나타낸 변수

    // 바로..... 모든 {}의 가장 바깥에서 만든 변수(이 cpp 파일 맨 위 참조)

    std::cout << glb << std::endl;
    std::cout << glbf << std::endl;
    std::cout << glbc << std::endl;

    // 이렇게 모든 {}의 가장 밖에서 만든 변수 : *전역 변수*라고 한다

    // Global Wariables : {} 어디서든 호출할 수 있는 변수

    // 반대로 {}안에서 만든 모든 변수를 총칭해서 *지역 변수* 라고 한다
    
    // Local Wariables : 만들어진 {} 안에서만 호출할 수 있는 변수
}