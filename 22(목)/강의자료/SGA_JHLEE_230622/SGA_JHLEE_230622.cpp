#include <iostream>
#include <stdlib.h>
#include <Windows.h>

// 1인용 빙고

// 1. 오늘 연습했던 5x5 숫자 출력을 활용해서 숫자 판을 표시합니다.
// 2. 두 정수 x, y를 입력으로 받도록 해주세요.
// 3. 입력으로 받은 두 정수 x, y에 해당하는 위치의 숫자를 지워주세요.
// 4. 가로, 혹은 세로, 혹은 대각선 한 줄이 모두 지워지면 빙고 한 줄이 채워집니다.
// 5. 빙고가 세 줄이 되면 게임이 끝납니다.


int main()
{
    // 배열의 응용법

    // 1. 배열의 배열 : 다중배열, 다차원 배열

    int a[3] = { 1, 2, 3 };
    int b[3] = { 4, 5, 6 };

    int ab[3][2] = { 1, 2, 3, 4, 5, 6 };
    //2개짜리 배열을 원소로 쓰는 3개짜리 배열

    std::cout << ab[0][0] << std::endl; //배열의 호출도 [][]를 사용해서 작성
    std::cout << ab[0][1] << std::endl;
    std::cout << ab[1][0] << std::endl;
    std::cout << ab[1][1] << std::endl;
    std::cout << ab[2][0] << std::endl;
    std::cout << ab[2][1] << std::endl;

    //다차원 배열에서는 더 오른쪽에 있는 []가 먼저 순번이 돌고,
    //그 다음에 더 왼쪽에 있는 []가 순번이 돈다
    // 더 오른쪽에 있는 []가 더 작은 원소(부분 배열)를 뜻하고, 그래프로 치면 x축 같은 역할을 한다

    // "다차원 배열"이라고 불리는 만큼... 배열의 중첩이 2중으로만 국한되지도 않는다
    // 배열의 차원은 중첩 가능한 만큼 (메모리가 버티는 만큼) 할 수 있다 (현실적으로 그렇게 하는 경우는 적지만)
    int d3[1][2][3];   //삼중 (3차원) 배열
    int d4[1][2][3][4]; //사중 (4차원) 배열


    // 2. 다차원 배열을 일괄 처리하는 방법

    // 다차원 배열도 그냥 배열과 마찬가지로 반복문을 써서 일괄 처리할 수 있다

    // -> 반복문도 반복문 안에 또 만듦으로써 다차원 배열을 다룰 수 있다.

    // : 다중 (중복) 반복문

    int dec[10][10];

    for (int i = 0; i < 10; ++i)
    {
        //이 반복문은 0부터 9까지 돌아간다

        for (int j = 0; j < 10; ++j)
        {
            //i가 순번인 위쪽 for문이 한 번 돌아갈 때,
            //j가 순번인 이 반복문이 0부터 9까지 돌아간다
            // i가 0일 때, j가 0부터 9까지 한 번, 다시 i가 1이 되고 나서 j는 또 0부터 9까지 쭉, 반복...
            // = 이 반복문은 10 * 10, 100번 돌아간다

            dec[i][j] = (i * 10) + (j + 1);
            //i-j번째 숫자에, i를 십의 자리로, j를 일의 자리로 설정한 숫자를 할당

            std::cout << dec[i][j] << std::endl;
        }

        std::cout << "i가 순번인 반복문이" << i + 1 << "번 돌았습니다." << std::endl;
        //i는 0~9니까 i+1 하면 1부터 10까지 셀 수 있다
    }

    //다중 반복문을 활용하는 다른 사례

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; ++j)
        {
            std::cout << " * "; //j 반복문이 도는 동안, * 표시를 출력하고
            //std::cout << i * j; //이 경우는 숫자를 표시 가능
        }
        std::cout << std::endl; //i 반복문이 끝날 때 줄바꿈을 하면
    }

    //위 코드에서 어떤 부분을 고치면... 사각형을 삼각형으로 바꿀 수도 있습니다.

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j <= i; ++j)
        {
            //j가 돌아갈 때마다 한 가지 바뀌는 숫자 : i
            //처음 이 반복문이 돌아갈 때 i = 0
            //마지막으로 돌아갈 때 i = 9

            //두 번째 for문의 조건이 j <= i 가 된다면
            //처음 돌아갈 때는 j가 0일 때 한 번만 돌고
            //마지막 돌 때는 0부터 9까지 10번 다 돌고...

            std::cout << " * ";
            
        }
        std::cout << std::endl;
    }

    for (int i = 0; i < 10; i++)
    {
        for (int j = 10; j >= i; --j)
        {
            std::cout << " * ";

        }
        std::cout << std::endl;
    }


    // 3. 다중 반복문을 다른 배열과 같이 활용하는 법

    // 데이터가 처음 만들어지는 배열과, 표시하기 위한 배열을 따로 만드는 것
    // 데이터가 만들어질 때는 전체 원소를 한 번에 관리하는 편이 편하다 : 그냥 배열
    // 표시를 해야 된다 = 2차원으로 표시할 경우, 가로, 세로 해서 2차원 배열

    // -> 데이터 배열을 먼저 만들고, 그 값을 2차원 배열에 대입(할당)하는 식으로 활용

    int rawData[9] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    int printData[3][3];

    //원시 데이터(raw data)의 내용을 (순서를) 랜덤으로 바꾸기
    srand(GetTickCount64());

    for (int i = 0; i < 1000; ++i)
        //이 반복문에서 i는 반복문 속에서 쓰는 변수가 아니라, 오직 for문이 돌아갈 횟수만을 뜻한다
        //=1000번 돌아가는 반복문
    {
        //랜덤 숫자 두 개 만들기
        int x1 = rand() % 9;
        int y1 = rand() % 9;

        //랜덤 숫자를 순번으로 하는 두 원소의 위치 바꾸기
        int tmp = rawData[x1];
        rawData[x1] = rawData[y1];
        rawData[y1] = tmp;
    }

    //원시 데이터(raw data)의 값을 표시용 데이터(print data)에 일괄 할당 후 표시
    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            printData[i][j] = rawData[(i * 3) + j];
            std::cout << printData[i][j] << std::endl;
        }
    }

    //오늘의 연습 : 1부터 25까지 (5x5) 숫자를 2중배열로 할당하기
    // -> 할당된 2중 배열을 가로 5개, 세로 5개로 출력
    // -> 출력까지 가능하면 랜덤으로 숫자 순서도 바꿔봅시다.

    //25개 원시데이터
    int raw2[25];

    //5x5 배열
    int arr[5][5];

    //원시데이터 넣기
    for (int i = 0; i < 25; ++i)
    {
        raw2[i] = i + 1;
    }
    
    //원시데이터 섞기
    for (int i = 0; i < 1000; ++i)
    {
        int x1 = rand() % 25;
        int y1 = rand() % 25;

        int tmp = raw2[x1];
        raw2[x1] = raw2[y1];
        raw2[y1] = tmp;
    }

    //실제 데이터 넣기
    for (int i = 0; i < 5; ++i)
    {
        for (int j = 0; j < 5; ++j)
        {
            arr[i][j] = raw2[(i * 5) + j];
        }
    }

    //데이터 출력하기
    for (int i = 0; i < 5; ++i)
    {
        for (int j = 0; j < 5; ++j)
        {
            std::cout << arr[i][j] << " ";
        }
        std::cout << std::endl;
    }
}