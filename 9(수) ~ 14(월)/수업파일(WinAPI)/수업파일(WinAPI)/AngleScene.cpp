#include "AngleScene.h"

// 헤더
#include <math.h> // 각종 수학 관련 알고리즘을 불러오기 위한 헤더

AngleScene::AngleScene(HWND _hWnd)
{
	this->hWnd = _hWnd;      // 출력할 윈도우(앱)
	hdc = GetDC(_hWnd);      // 출력할 장소(하드웨어)

	// 추가로 무슨 변수가 있으면 여기서 초기화
	x = 0;
	y = 0;
}

void AngleScene::GetInput(WPARAM _wParam)
{
	switch (_wParam)
	{
	case VK_UP:
		// 위 → 각도가 + (기준 사분면에서)
		angle += 0.1f;
		break;
		// 아래 → 각도가 -

	case VK_DOWN:
		angle -= 0.1f;
		break;

	case VK_LEFT:
		// → 왼쪽 각도가 +
		angle += 0.1f;
		break;

	case VK_RIGHT:
		// 오른쪽 → 각도가 -
		angle -= 0.1f;
		break;
	}
	InvalidateRect(hWnd, NULL, true);
}

void AngleScene::Render()
{
	// 시험으로 직선을 그려봅시다
	
	// 예제코드를 복습을 겸해서, 색깔(펜을 이용) 생성 후, 직선을 그리고, 펜 삭제

	HPEN pen = CreatePen(PS_SOLID, 2, RGB(255, 0, 0));     // 펜 생성
	HGDIOBJ oldPen = SelectObject(hdc, pen);               // 윈도우가 펜을 선택한 후(SelectObject) 남은 기존 펜을(oldPen)에 백업

	// 직선 그리기
	// 1. (컴퓨터 속 가상 입력 도구의 자료를) 지정 좌표로 움직이기
	MoveToEx(hdc, 300, 300, NULL);    // 매개변수 뜻 : 이 모니터에, x100, y200, 과거 좌표 참조 안 함)
									  //              여기 위치로 보이지 않는 기준점을 설정
	
	// 2. (가상 입력 도구의 좌표를) 이동시키면서 직선 궤적을 그림으로 남김
	LineTo(hdc, 300, 200);            // 매개변수 뜻 : 이 모니터에 x100, y400 위치로 입력도구를 이동하면서 그 궤적을 직선으로 그린다

	SelectObject(hdc, oldPen);        // 윈도우가 다시 백업된 (기본) 펜을 선택 (만든 펜은 이 코드로 인해 붕 뜬다) 
	DeleteObject(pen);                // 필요가 없어진 펜을 안전하게 삭제

	// -------------------------------------------------

	// 위가 직선을, 고정된 **위치** 기준으로 그릴 때의 코드

	// ...그러면, "삼각형을 그리고 싶을 때는?"
	// 그리고 그냥 삼각형이 아니라, 각도가 정해진 삼각형

	// 혹은 (지금은 해당 코드를 안 배웠지만) 나중에 그림을 회전을 시키고 싶다면

	// 필요한 것은 바로 각도

	// x 얼마, y 얼마를 바로 지정하는 게 아니라, 각도에 의한 x, y 연산 결과를 쓸 수 있어야 한다

	// 그리고 이 때, 각도에 의한 x, y 값의 수정치를 알기 위해서는 (혹은 반대로 좌표를 알 때 각도까지 알기 위해서는)
	// → 삼각함수가 필요하다

	// 삼각함수 : 강의 중 그림을 우선 보고, 나머지 개념은 참고자료나 검색 등으로 보충합시다

	// *삼각함수를 쓰려면 해당 기능을 포함

	HPEN pen2 = CreatePen(PS_SOLID, 2, RGB(0, 0, 255));    // 색깔을 파란색으로
	HGDIOBJ oldPen2 = SelectObject(hdc, pen2);

	MoveToEx(hdc, 300, 300, NULL);
	
	// 직선의 시작점과 끝점 사이에 삼각함수 코드를 넣어서 각도에 의한 목적지를 정해줍시다
	x = (cos(angle) * 100) + 300;
	y = (-sin(angle) * 100) + 300;
	// - 기호의 의미 : 윈도우에서 계산된 사인 함수의 결과가 윈도우 좌표와 방향이 달라서 보정하기 위함
	// 100 : 비율에 곱하는 위치의 보정치. 목적지로 가는 직선(빗변)의 기대 길이
	// 300 : 위 MoveToEx에서 지정된 시작 위치 (원점)

	// 삼각함수 코드 자체는 위에 있는 만큼만 알고 숙지헤도 코딩에 충분!
	// + 삼각함수가 "어떻게 개념이 시작되는가" 까지는 알면(알아야) 게임 등에서 적재적소에 쓸 수 있다

	// * 컴퓨터를 잘 쓰려면 수학을 잘 할 필요는 없다. 대신 수학의 이야기를 좋아해야 한다
	//                                             (혹은 "수학적 사고를 해야 한다")

	// * 위 코드와 더불어서 추가로 알아야 되는 개념 몇 가지 더
	// 1. cos, sin 함수를 썼을 때, 1을 넣으면 "각도 1도"에 의한 결과가 나오지 않는다
	//    → 컴퓨터는 각도 개념이 아니라 "호도"라는 개념을 쓴다
	//      따라서 cos, sin 함수에 1을 넣으면 "호도 1"을 계산한다
	
	//      호도는 무엇인가? (원을 쪼갠) 호의 둘레(곡면)와 반지름(호의 직선)이 길이가 같은 것을 1로 계산한 각도 계산법
	//      호도의 원문이 radian

	//      호도는 식으로는 180 / 원주율
	//      → 그래서 우리가 아는 "각도"를 호도로 바꾸어서 쓰고 싶을 때는 반대로
	//        지정한 숫자에 원주율을 곱하기 180으로 나누면 된다

	//      ...보통은 cpp 위쯤이나 framework.h에 미리 define을 해두는 경우가 많다
	//      (예 : #define PHI 3.141592) 나중에 파일 모음 등에서 확인할 기회가 있을지도

	// 2. 윈도우는 y값이 커질수록 출력 위치가 (화면 좌표가) 밑으로 내려온다 (수학 좌표와 반대)
	//    그래서 sin 함수의 값을 그냥 구할 때는 그냥 써도 되지만, (그냥 써야 하지만)
	//    그림으로 표현할 때는 -를 붙여서 방향을 반대로 뒤집어 줘야 한다

	// 각도에 의한 비율과, 길이를 위한 배율과, 원점 정보에 의해 x, y 위치를 다시 정했다

	LineTo(hdc, x, y);

	SelectObject(hdc, oldPen2);
	DeleteObject(pen2);

	// ---------------------------------------

	// 좌표를 알 때 각도를 알고 싶다면?

	// 45도 각도로 그어지는 직선을 (=윈도우의 1, 1을 목표로 하는) 삼각함수 직선을 그려보자

	// 좌표
	float newX = 300 - 1;
	float newY = 300 - 1;

	// 각도를 구하는 법
	// angle = atan(newY / newX); // atan : 탄젠트(tan)를 통해 각도(a)를 구하는 함수
	// angle = atan2(newY, newX); // atan2 : 위와 똑같은 함수. 단지 매개변수 두 개를 쓸 뿐
	                           // 1. 느려집니다
							   // 2. 안전해집니다
							   // 3. 식에 변수가 둘 필요하다는 사실과, 무엇을 무엇으로 나누는지를 사용자가 빨리 기억할 수 있습니다

	x = (cos(angle) * 100) + 300;
	y = (-sin(angle) * 100) + 300;

	MoveToEx(hdc, 300, 300, NULL);
	LineTo(hdc, x, y);

	// 정삼각형 하나만 더 그려봅시다!
	x = 200;
	y = 400;

	MoveToEx(hdc, x, y, NULL); // 원점

	x = x + (cos(GetDegree(60)) * 100); // ← 여기서 각도가 60도로 딱 나와야 하는데
	// 각도를 어떻게 구할까? : 호도나 각도를 따지기 전에, 그냥 각도를 함수로 직접 구하면 어떨까?
	// 그래서 헤더에서 함수 작성 후 여기서 호출 (+원주율도 밀 매크로로 만들자)
	y = y + (-sin(GetDegree(60)) * 100);

	LineTo(hdc, x, y); // 정삼각형의 위쪽 꼭지점 (60도 위로 간 곳)

	x = x + (cos(GetDegree(-60)) * 100);
	y = y + (-sin(GetDegree(-60)) * 100);

	LineTo(hdc, x, y); // 정삼각형의 위쪽 꼭지점 (60도 위로 간 곳)

	x = 200;
	y = 400;

	LineTo(hdc, x, y); // 원점으로
}

float AngleScene::GetDegree(float _rawDegree)
{
	// 원주율 / 180 = 각도 1, 각도 * 원형 각도 = 컴퓨터용 각도
	// return (PHI / 180) * _rawDegree;

	// 호도로 바꿔줘야 할 경우 아래쪽 코드로 사용
	return (180 / PHI) * _rawDegree;
}

void AngleScene::Update()
{

}