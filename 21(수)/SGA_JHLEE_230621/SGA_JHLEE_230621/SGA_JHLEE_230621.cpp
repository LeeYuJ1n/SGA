#include <iostream>
#include <stdlib.h>
#include <Windows.h>


// 오늘의 과제 (겸 실습)

// 바카라 (간단 버전)

// 바카라 : 포커판 홀짝 (카드를 뒤집어놓고 누구 수가 더 큰지 내기하는 것)
// = 숫자가 크다고 이기는 것이 아니라, 누구 숫자가 더 큰지를 맞춘 쪽이 이기는 것!

// 1. 포커 카드 배열 한 줄을 작성해주세요.
// 2. "플레이어"라는 쪽이 받는 정수 변수 두 개를 작성해주세요.
// 3. "뱅커"라는 쪽이 받는 정수 변수 두 개를 작성해주세요.
// 4. 플레이어의 점수, 뱅커의 점수를 각각 작성해주세요.

// 5. 플레이어는 정수 변수 두 개에 각각 랜덤 포커 카드 하나를 받습니다. (중복 가능)
// 6. 뱅커 역시 정수 변수 두 개에 각각 랜덤 포커 카드 하나를 받습니다. (중복 가능)

// 7. 플레이어와 뱅커는 각각 자기가 받은 카드 둘의 숫자를 더합니다.
// 8. 이 때, 받은 숫자의 10의 자리는 무시합니다. (1의 자리만 남겨서 비교)
// 9. 더한 결과도 10을 넘었으면 10의 자리는 무시합니다.

// 10. 플레이어와 뱅커의 카드 합(의 1의 자리)이 공개되지 않은 상황에서,
// 사용자는 플레이어와 뱅커 중 누구의 카드의 합이 더 큰지를 맞춥니다.

// 11. 맞춘 쪽이 카드의 합이 더 크면, 플레이어가 점수를 1점 받습니다.
// 12. 맞춘 쪽이 카드의 합이 더 작으면, 뱅커가 점수를 1점 받습니다.

// 13. 먼저 3점을 받은 쪽이 이깁니다. (플레이어 혹은 뱅커) 승자가 나오면 게임이 끝납니다.

// 구현해서 제출해주시면 됩니다.

// 추가 사항 1. 비교를 했을 때, 반드시 한쪽이 더 크지 않을 수도 있습니다....! (비긴다는 선택지도 들어가야 합니다!)

// 추가 사항 2. 바카라에 적용되는 추가 룰을 적용해도 됩니다. (필수 아닙니다. 그냥 재미 삼아 해보셔도 됩니다)
// 
// - 잭(10), 퀸(11), 킹(12)를 10, 11, 12라고 하지 않고 0으로 취급할 수 있습니다.
// - 맞추기 전에, 플레이어는 자기 카드를 볼 수도 있습니다.
// - 카드를 공개한 후, 플레이어가 만약 졌는데 (못 맞췄는데) 둘 다 합이 6 이하일 경우, 연장전으로 카드를 한 장 더 뽑을 수도 있습니다.
// - 연장전을 했을 경우 플레이어는 누가 합이 더 큰지 다시 맞춰야 합니다.




int main()
{
    //기본적인 변수의 작성 / 사용법
    int a = 1;
    int b = 2;
    int c = 3;

    //...이런 변수들을 한꺼번에 다뤄야 하는 상황이 오면?
    //-> 여러 개의 "같은 자료형을 공유하는" 변수를 하나의 그룹으로 묶어서 써야 할 수도 있다 (그런 경우가 생각보단 많다)

    // -> 이 때 사용하는 것이 같은 이름을 사용하고, 순번을 다르게 배정하는 "여러 개의 변수 묶음" = 배열(array)

    // 배열의 작성법 : 자료형 변수이름[배열크기] = { 변수값, 변수값, 변수값..... 변수값 }
    // *{} 안에 들어가는 값의 양은 배열의 크기만큼

    //예 : 5개의 정수를 하나의 배열로 만들기
    int arr[5] = { 1, 2, 3, 4, 5 };

    //만들어진 배열의 확인/사용법

    std::cout << arr << std::endl; //일반적인 변수의 확인/사용법
    //그러나 배열의 이름을 썼을 때는 우리가 (일반적으로) 기대할 법한 결과 (즉 1, 2, 3, 4, 5)는 나오지 않는다
    //= arr이라는 이름의 지칭은, 단순한 숫자의 조합이 아니라 별도의 데이터를 포함한다
    //= arr이라는 배열에 넣은 숫자를 보고 확인하고 사용하려면 다른 방법을 써야 된다

    std::cout << arr[1] << std::endl; //배열에 들어간 숫자의 확인/사용법
    //배열의 내용을 알기 위해서는, 배열 이름 뒤에 []를 붙이고, 그 안에 보려는 원소(=구성요소)의 순번을 넣어줘야 한다
    
    //배열을 처음 작성할 때 넣는 [] : 그 배열의 크기를 뜻한다
    //작성된 배열을 사용하거나 확인할 때 이름 뒤에 붙이는 [] : 보려는 원소의 순번

    // 배열에서 순번을 지정할 때는 0번째부터 시작한다
    std::cout << arr[0] << std::endl; // [0] : 배열의 첫 번째 원소라는 뜻
    std::cout << arr[1] << std::endl;
    std::cout << arr[2] << std::endl;
    std::cout << arr[3] << std::endl;
    std::cout << arr[4] << std::endl; // 배열의 크기가 5라면, 배열의 마지막 순서는 [4] (= 5 - 1)
    //std::cout << arr[5] << std::endl; // 배열의 크기가 5일 때, [5]를 부르면 배열에서 지정하지 않았던 이상한 데이터가 불러와진다 = 사용 불가능

    //배열의 용도가 여러 변수를 하나의 이름으로 묶어서 쓴다....는 것인데,
    //양이 많지 않은 변수도 굳이 이름을 공유시킬 필요가 있는가? ..... 경우에 따라서는 그 편이 효율적일 수도 있다!

    // 배열의 응용 : 여러 개의 변수를 편하게 다루는 법

    // 1. 반복문과 조합 (for문, 혹은 while문) - 일괄 처리

    int arr_two[10]; //배열을 선언만 한 다음

    //반복문을 이용해서 값 일괄 할당
    for (int i = 0; i < 10; ++i) //여기서 i<10의 10은 위에 만든 배열의 크기 10
    {
        arr_two[i] = i + 1; //i를 이용해서 순번을 0번부터 9번까지 모두 돌릴 수 있다
    }

    //출력도 반복문을 활용해서 일괄 처리
    for (int i = 0; i < 10; ++i)
    {
        std::cout << arr_two[i] << std::endl;
    }

    // 2. 관련성이 높은 숫자 그룹을 만들어서 코드에 의미를 부여
    // - 나중에 다시 보거나, 타인의 코드를 볼 때 이해하기 쉬워진다

    // 포커 카드 한 줄
    int playingCard[12] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1};
    // -> 의미 없어 보이는 정수 13와 뒤섞인 순번이지만, 하나의 배열로 만들고 이름을 부여함으로써 의미도 같이 부여
    // 이 경우 10은 잭, 1은 에이스

    // 이런 식으로 배열로 숫자를 집합화하면(집합으로 만들면) 나중에 다시 봐도 이 코드, 이 데이터의 의미를 알 수 있다

    std::cout << "킹 카드 : " << playingCard[10] << std::endl; //11번째 카드 = 12 = 킹


    //---------------------------------------------------

    //배열과 더불어서 사용할 수 있는 추가 코드 팁

    // 1. 배열 속 원소끼리의 위치 바꾸기

    int tmp = playingCard[0]; //임시로 정수 변수를 만든 후 포커카드의 첫 카드를 넣는다
    playingCard[0] = playingCard[11]; //0번째 자리의 값을 마지막 자리의 값으로 바꾼다(넣는다)
    playingCard[11] = tmp; //마지막 자리의 값을 아까 만들어 둔 tmp(=포커 첫 카드) 값으로 바꾼다(넣는다)

    // 원리 : 임시로 빈 공간(빈 정수)을 만들어서 그 자리에 원본A을 넣고
    // 원본 A의 자리에 원본 B를, 원본 B 자리에는 아까 만든 새 공간의 원본 A를 넣으면 된다

    //출력해보기(일괄)
    for (int i = 0; i < 12; ++i)
    {
        std::cout << playingCard[i] << std::endl;
    }

    // 2. 랜덤 한 장 뽑기

    srand(GetTickCount64());

    int randomIndex = rand() % 12; //0 ~ 11
    std::cout << "랜덤 한 장 : " << playingCard[randomIndex] << std::endl;

    // 
}