#include <iostream>

int main()
{
    // 프로그래밍을 하다 보면 조건에 따라 다른 결과가 나와야 할 경우도 발생

    // 이 때, 조건에 따라, 어떤 결과가 나와야 하는지를 코드로 지정을 해줄 수 있다
    // 이런 코드를 통칭해서 "제어문"이라고 한다

    // 제어문은 다시 크게 둘로 나뉘는데, 하나 하나의 조건을 지정해서 하나의 결과를
    // → 조건문

    // 두 번째는 여러 번의 반복되는 코드 범위를 정해서, 똑같은 결과, 혹은 "규칙을 가지고 조금씩 바뀌는
    // → 반복문

    // 조건문을 작성하는 방법
    // if (조건)

    /*
    int firstNumber = 10;
    int secondNumber = 0;

    if (secondNumber != 0) // 두 번째 숫자가 0이 아니라면
    {
        std::cout << firstNumber / secondNumber << std::endl; // 0으로 나눴을 때 에러나는 코드
    }
    else // else : 조건으로 지정했던 경우가 발생하지 않았을 때 (if의 나머지 경우 모드)
    {
        //두 번째 숫자가 0이 아닌 경우를 제외했으므로, 두 번쨰 숫자가 0일 때 아래 코드가 실행
        // → 나누기가 아닌 다른 코드가 필요

        std::cout << "0으로는 나눌 수 없습니다." << std::endl;
    }
    */

    // ------------------------------------------------------------------------

    // 중간 팁 : 변수의 이름 짓는 방식에 대해서

    // 변수는 몇 가지 법칙만 따르면 어떤 단어, 어떤 이름, 어떤 길이로든 만들 수 있다
    // → 너무 짧은 변수 이름을 남용하게 되면 나중에 다시 봤을 때 헷갈릭 쉽다
    // → 공식처럼 굳어진 일반적인 사례 몇 가지를 빼면, 우리가만드는 코드의 이름은 구체적일 수록 좋다
    // 약간 길어도 상관없고, 단어가 여럿이어도 상관없다 : 그 편이 나중에 보기에 편하다
    // (실제로 만들어진 코드도 대부분은 구체적인이름을 선호하는 경향이 있다)

    // 변수를 만들 때 지켜야 할 원칙
    // 1. 변수 이름에서 대소문자는 엄격히 구분된다(a와 A는 다른 글자다)
    // 2. 변수 이름은 알파벳으로 시작해야 한다(숫자로 시작할 수 없다 = 컴퓨터가 진짜 숫자라고 착각한다)
    // 3. 변수 이름에는 _("언더바", 시프트 누르고 -키) 기호를 제외한 대부분의 특수 문자는 사용할 수 없다

    int no1; // int 2no; → 에러발생(숫자가 앞에 있어서 컴퓨터가 숫자로 착각한다)

    // 변수 이름을 만들 때 추가 팁 : 변수 이름을 여러 단어로 만들기
    // 1. 일단 변수 이름에 공백은 넣을 수 없다(공백도 특수문자)
    // 2. 대신 글자에 변형을 줘서 앞 글자와 뒷 글자의 차이를 표현할 수는 있다
    // 3. 변수의 첫 글자는 소문자가 편하다

    // 변수의 이름이 여러 단어로 만들어져 있다면
    // → 1. 첫 단어를 소문자로 표현 → 두 번째 단어의 첫 글자만 대문자로 쓴다
    // 예시 : seoulGameAcademy (이런 방식을 낙타 방식 이름 짓기라고 한다(캐멀 케이스)
    // → 2. 모든 단어를 소문자로 표현 → 단어와 단어 사이에, 공백의 역할을 _로 표현(스페이스바 대신)
    // 예시 : seoul_game_academy (이런 방식을 뱀 방식 이름 짓시라고 한다(스네이크 케이스)
    // 실제로 만들어진 코드들도(최근에 만들어졌을수록) 위 두 방식 중 하나를 실제로 사용 중

    // ------------------------------------------------------------------------

    // 조건문 2

    // if문에서 조건문 하나가 아니어도 된다(여러 조건 가능)
    // 이 때, "여러" 조건의 형태는 다음과 같을 수 있다
    // 1. 1인 경우 | 2인 경우 + 3인 경우...(경우의 수가 많을 경우)
    // 2. 1이고, 동시에 2이어야 하는 경우(경우의 수는 하난데 그 경우를 이루는 조건이 둘 이상)
    // 3. 1이거나, 2이거나, 3이거나, 아무튼 하나만 맞으면 되는 경우(경우의 수는 하나, " 그 경우의 수를 이루지 못하는 조건"이 둘 이상)
    // (1도 아니고, 2도 아니고, 3도 아니어야 " 그 경우가 아니다"라고 할 수 있으니까)

    // 사용될 변수
    int conditionNumber2 = -1000;

    if (conditionNumber2 > 999 || conditionNumber2 < 0)
        // || : 조건이 둘 이상일 때, 제시된 여러 조건 중 하나만 맞으면 최종 조건이 충족된다는 뜻
    {
        // 숫자가 아주 커도 여기 있는 코드를 실행
        // 반대로 숫자가 0보다 작아도 여기 있는 코드를 실행
        std::cout << "이 숫자는 세 자릿수보다 크거나, 음수입니다." << std::endl;
    }

    // 이 변수가 자릿에 따라 안내를 다르게 해주는 조건문
    else if (conditionNumber2 >= 100) // else if는 반드시 if문의 두 번째 이후에 나와야 한다
        // >=, <= : 비교 연산자의 다른 표현, "크거나 같아, 혹은 작거나 같다"는 뜻
        // 여기서는 변수가 100보다 크거나 같을 때를 의미
    {
        std::cout << "이 숫자는 세 자릿수 이상입니다" << std::endl;
    }
   //else if (conditionNumber2 < 100 && conditionNumber2 >= 10)
        // else if : 경우의 수가 여럿일 때, 두 번째 이후의 이루는 조건을 지정하는 문장
        // && : 조건이 둘 이상일 때, 앞의 조건도 맞고,  뒤 조건도 맞아야 최종 조건도 맞다는 뜻(논리곱)

    else if (conditionNumber2 >= 10)
        // if문의 추가 특징 : 앞의 조건이 달성되면 뒤의 조건은 보지도(실행하지) 않는다
        // 따라서 두 번째 조건이 첫 번째 조건을 동시에 만족하더라도, 그리고 첫 번째 조건이 동시에 만족하더라도
        // 해당 경우 실행되는 건 오직 첫 번째 조건뿐(두 번째 조건은 "첫 번쨰 조건이충족되지 않으면 실행)
        // =if문은 반드시 한 번에 하나의 결과만 실행한다

    {
        std::cout << "이 숫자는 두 자릿수입니다." << std::endl;
    }
    else if (conditionNumber2 < 10 && conditionNumber2  > 0)
    {
        std::cout << "이 숫자는 한 자릿수입니다." << std::endl;
    }
    else if (conditionNumber2 == 0) // == : 이 연산자의 왼쪼고가 오른쪽이 같다
    {
        std::cout << "이 숫자는 0입니다." << std::endl;
    }
    else // 100보다 크지도, 10보다 크지도, 0보다 크지도, 0이지도 않으므로 음수
    {
        std::cout << "이 숫자는 음수입니다." << std::endl;
    }

    // ------------------------------------------------------------------------

    // 조건문 3

    // 조건문은 다른 조건문 안에 쓸 수도 있다!

    int conditionNumber3 = 99;

    if (conditionNumber3 > 0)
    {
        std::cout << "이 숫자는 양수입니다." << std::endl;

        // 조건문 속 조건문
        if (conditionNumber3 >= 10)
        {
            std::cout << "이 숫자는 두 자릿수입니다." << std::endl;
        }
    }
}