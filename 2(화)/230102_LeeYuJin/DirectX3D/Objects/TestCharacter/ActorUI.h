#pragma once
class ActorUI
{
    // 액터 UI : 캐릭터 혹은 움직이는 물체에 귀속된 UI 일체
    //           캐릭터를 개념적으로 따라다니면서 필요한 정보를 출력해주는 것이 목적
    //           * 현재는 UI버퍼 포트에 전체 화면 방식으로 UI를 먼저 출력
    
    // 액터 UI가 될 수 있는 것

    // <캐릭터라는 대상에 귀속되는 것>
    // -체력바
    // -캐릭터의 이름
    // + 칭호, + 길드 등의 정보....
    // -선택 여부 (아웃라인)

    // <캐릭터의 역할에 귀속되는 것 = "누가 이 캐릭터를 쓰고 있느냐에 달린 것">
    // - 조준선
    // - 인벤토리....의 퀵슬롯
    // - 플레이어용 메뉴
    // - 점수라든가, 캐릭터의 체력(플레이어용 표시) 등...

    // 이 중 아래에 있는 분류를 우선해서 구현...

    //---------------------------------------------------------

public:

    ActorUI();
    ~ActorUI();

    void Update();
    void Render();
    void PostRender();
    void GUIRender();

    // UI가 있으면 -> UI를 통해서 플레이어가 할 수 있는 것
    
    // *블록매니저와 상호작용할 수 있는 함수
    void Pick(); // 집어들기 (대상을 월드에서 빼거나, 들어올리거나, 내 안의 공간으로 가져오기)
    void Build(); //짓기 (내 안의 공간에서 월드로 대상을 옮겨서 "쌓기")

private:

    map<int, vector<Cube*>> inventory; // 인벤토리
                                       // 데이터 쌍의 역할 : key =  큐브의 종류
                                       //                   value = 큐브

    int selectIconIndex = -1; // 선택 중인 인덱스 : 기본값은 "없음"
    map<int, pair<int, int>> iconData; // 인벤토리와 같이 사용할 "아이템 아이콘" 변수

    //실제로 아이콘을 쓰기 위한 데이터
    vector<Quad*> blockIcons; //블록의 아이콘들

    // 리소스
    Quad* iconFrame; // 아이콘 및 선택 중에 사용할 커서 등의 그림에 쓰기 위한 리소스
    Quad* quickSlot; // 퀵슬롯의 배경 그림

    // + 조준선
    Quad* crosshair; // UI 안으로 조준선 가져오기

};

