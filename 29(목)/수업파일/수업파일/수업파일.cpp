#include <iostream>

int main()
{
    // 반복문
    // : 정해진 규칙에 따라 반복하면서, 코드로 정해진 변화를 따르거나, 그 외 똑같은 코드를 반복 수행하는 것

    // 반복문의 정의를 이해하는 대는 사실 for문이 더 적합 / while문은 "다른 조치가 없으면 무한"이라는 점 때문에 실제 코딩에서 좀 더 자주 선택되는 경향(C++ 시점)

    // 다이렉트x나 엔진까지 가면 또 다시 for문이 더 자주 선택(이쪽은 while 아니라도 무한으로 돌아가는 코드가 이미 있어서)

    // ---------------------------------------------

    // while문

    // 사용 방법 : while(반복 조건) {반복할 코드}
    // → 반복 조건이 true인 한, {} 안에 있는 코드를 반복

    int count = 0; // while문 조건에 쓰기 위한 변수를 미리 작성

    // while문이 기본적인 사용 방법
    while (count < 10)
    {
        std::cout << count << std::endl; // count 변수 출력

        count++; // 코드가 진행될 떄 조건에 변화가 생기도록 코딩하면, 이 변화로 인해 반복조건 여부에도 변화가 생기고, 이에 따라 반복을 멈출 수 있다
    }


    std::cout << "-------------------------------------------" << std::endl; // 줄나누기(반복문끼리 구분해서 알아보기 쉽게)


    // while문에서 변화가 이루어지고 적용되는 시점을 알아보자
    count = 0; // while문 조건에 쓰기 위한 변수를 미리 작성

    while (count < 10)
    {
        count++; // 숫자 1 올라가기부터 한다면, 마지막에는 이 줄에서 count가 10일 될 텐데?

        std::cout << count << std::endl; // 그래도 count 변수는 10까지 문제없이 출력

        // 숫자가 10이 되어도, 10 출력까지는 다 하고 → 다음 반복에서 숫자가 10보다 작은 때라는 조건에 걸려서 중단

        // 반복문 수행 도중에 반복 조건이 성립되지 못하게 되어도... 일단 마지막 1회 전체 코드는 전부 수행
        // → 반복문이 돌아갈지 안 돌아갈지 여부는 그 반복문이 맨 처음으로 다시 돌아갔을 때 컴퓨터가 판단
    }

    std::cout << "-------------------------------------------" << std::endl; // 줄나누기(반복문끼리 구분해서 알아보기 쉽게)

    // while문의 좀 더 흔한 사용법
    // 무한으로 돌아가는 것을 기본 상태로 설정하고, "언제 중단된다"는 if문을 따로 작성

    count = 0;

    while (true) // 조건이 그냥 "아무튼 참"이라는 데이터로만 이루어져 있으니, 거짓이 될 수 없고 → 따라서 무한이 반복
    {
        std::cout << count << std::endl;

        count++;

        // count++ 수행 직후count가 10보다 커진다면 이 반복문은 종료
        // → 이 경우는 반복문 속 if기 때문에 if문이 수행되는 시점에서 중단되어야 한다면 그 즉시 중단

        if (count > 10)
        {
            break; // 코드 중단. {}나가기 (if는 {} 두 번 나기기)
        }

        // break가 수행되었는지 (코드가 정말로 중단 되었는지)알아보기 위한 문자출력
        std::cout << "이 반복문은 계속 수행되고 있습니다" << std::endl;
    }
    // break가 수행되면 여기로 나온다

    // 여기까지가 while문의 사용 방법과 사례

    std::cout << "-------------------------------------------" << std::endl; // 줄나누기(반복문끼리 구분해서 알아보기 쉽게)

    // while문의 특징 : 기본적으로 무한. 언제 끝날지를 개발자가 코드로 별도 지정 가능.
    // → 반복은 해야 하는데 정확히 언제까지 반복할지 모를 때 while문을 쓰면 좋다

    // 사례 : 입력을 받을 건데, 문자 0이 입력되어야 끝나는 반복문

    //입력에 쓸 변수
    char input;

    while (false) // 반복문이 뒤에 (false)넣으면...조건이 "거짓"이 되면서 반복문이 아예 수행을 안 한다
    {
        std::cout << "문자입력 : ";
        std::cin >> input;

        std::cout << "입력된 문자는 : " << input << std::endl;
        std::cout << std::endl;

        // 종료 조건
        if (input == '0')
        {
            std::cout << "종료합니다" << input << std::endl; // 반복문이 중단되기 전에도 마지막 코드는 작성 가능
            break; // 반복문 중단
        }
    }

    std::cout << "-------------------------------------------" << std::endl; // 줄나누기(반복문끼리 구분해서 알아보기 쉽게)

    // 반복문의 특징 : 반복문도 제어문, 따라서 조건문과 마찬가지로...중복이 가능하다(while문 안에, while문, 다른 제어문과 교차 중복 가능)

    // while 두 번 중복하는 사례

    int x = 0;
    int y = 0;
    int z = 0;

    while (true)
    {
        std::cout << "가로 : " << x << std::endl;

        while (true)
        {
            std::cout << "Y : " << y << std::endl;

            y++;

            if (y > 10) // y가 10보다 커지면 종료 if문
            {
                y = 0; // y가 10보다 커졌을 때 다시 0으로 되돌려놓기

                std::cout << "Z : " << z << std::endl;
                z++;

                break;

                if (z > 10)
                {
                    break; // 지금 이 반복문은 끝내기
                }
            }
        }
        x++;

        if (x > 10) // x가 10보다 커지면 종료
        {
            break;
        }
    }

    // 제어문이 중첩이 가능하다며느 while안에 switch도 가능할 것
    // 이 때 어떻게 반복문을 구성할 수 있을까

    int caseNumber = 0; // switch에 쓰기 위한 정수
    bool whileValid = true; // 반복문을 끝내기 위한 bool

    while (whileValid)
    {
        caseNumber++; // 사례번호를 하나 올려놓고 시작

        switch (caseNumber) // while 속 switch가 자주 선택되는 조합은 아니지만, 염연히 가능한 조합
        {
        case 10:
            std::cout << "10에 도달했습니다 종료합니다" << std::endl;
            whileValid = false;
            // 여기서 break를 안 썼으므로 밑에 있는 코드도 공통 수행

        default :
            // 사례번호가 10이든 아니든 무조건 출력코드 하나 실행하고 그 break도 무조건 실행
            std::cout << "현재 사례번호 : " << caseNumber << std::endl;
            break;
        }
        // break는 {} 한 겹만 나갈 수 있다 즉, 위 switch문에서 break를 쓴 결과는 switch문의 종료.
        // 다시 말해 이곳으로 나오기 위한 것, switch문 속 break로는 반복문을 끝낼 수는 없다

        // 반복문을 switch를 통해 끝내는 방법? - 별개의 변수를 활용하면 된다
        // 다른 변수의 값을 수정하고, 그 다른 변수를 반복문 중단 혹은 속행의 조건으로 쓰면 된다
        if (whileValid) // 계속할 때만
        {
            std::cout << "반복문은 계속 수행합니다" << std::endl; // 이렇게 출력
        }
    }

    std::cout << "-------------------------------------------" << std::endl; // 줄나누기(반복문끼리 구분해서 알아보기 쉽게)

    // for문법

    // 사용방법

    // 가장 대표적이고 단순한 사용 사례
    for (int i = 0; i < 10; i++)
    {
        std::cout << "10번 반복하는 for 문법 입니다" << std::endl;
    }
    // for문 다음의 ()안에 들억는 세 가지 규칙(각 규칙은 ;으로 구분)
    
    // 가장 왼쪽 (첫 번째) 규칙 : for문이 시작될 때 주어지는 시작 상황
    // 시작 상황은 먼저 만들어진 변수를 쓸 수도 있고, 보통은 for문 안에서만 쓰기 위한 별도의 변수를 하나 더 만든다(흔히 int i를 선호한다)

    // 중간(두 번째) 규칙 : for문이 돌아가기 위한 조건(while의 ()하고 같다)
    // 여기에 적힌 규칙이 참인 동안은 for문이 계속 돌아간다

    // 오른쪽 (세 번째) 규칙 : for문이 한 번 끝났을 떄 (반복할 때) 생기는 변화
    // 변화 역시 개발자가 지정하기 나름인데... 흔히 시작 상황으로 부여한 변수에 +1를 하는 경우가 많다

    std::cout << "---------------------------------" << std::endl;

    // for문의 문법을 활용한 다른 코딩 사례
    int index = 0; // 다른 곳에 index라는 변수를 따로 작성을 해두고

    for (index; index < 10; index++) // int i를 따로 만들지 않고, 먼저 만들어진 index를 조건에 써먹어도 된다
    {
        std::cout << index << std::endl; // index 출력
    }

    std::cout << "---------------------------------" << std::endl;

    for (int i = 1; i < 10000; i *= 2) 
        // i의 초기 값을 1로 지정(0으로 하면 2를 몇 번을 곱해도 0이니까)
        // 반복문이 한 번 끝났을 떄, i가 1증가가 아니라 두 배가 되도록 작성
    {
        std::cout << "현재 i의 값은" << i << std::endl; // for문 안에서 규칙의 한 부분으로 작성한 변수도, 염연한 변수라서 출력, 수정, 호출 등 모두 가능
    }

    std::cout << "---------------------------------" << std::endl;

    // for문 안에 for문 작성 가능

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++) // i가 1 올라갈 때마다 j를 쓰는 이 반복문이 10번 돌아간다
        {
            std::cout << "i : " << i << "// j : " << j << std::endl; // 여기서 i, j 출력
        }
    }

    std::cout << "---------------------------------" << std::endl;

    // **모든 반복문에 적용 가능한 부분
    
    // continue
    // 부분중단, 혹은 중단 후 속행(계속) : while에서도 똑같이 적용 가능

    for (int i = 0; i < 100; i++)
    {
        // 반복문 안에 if문 작성 가능 : 다 같은 제어문이다!
        // (if문 안에도 사실 반복문 작성 가능)

        if (i > 0 && i % 3 == 0) // i가 0보다 크고, 3으로 나눴는데 나머지가 0이다 = i가 3의 배수다
        {
            std::cout << "짝!" << std::endl;

            continue;
            // continue : 이 코드 밑에 있는 코드를 무시는 하지만...반복문은 계속 하겠다는 뜻
            // → 딱 여기까지 하고 반복문의 처음으로 돌아가겠다는 뜻
        }
        
        // i가 3의 배수인 경우 아래의 출력 코드가 무시된다(수행되지 않는다)

        std::cout << i << std::endl;
    }
}