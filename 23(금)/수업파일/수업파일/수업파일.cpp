#include <iostream>

int ShowNumber(); // 밑에 설명
int ShowThisNumber(int _input);
int Sum(int _a, int _b);
void Print(int _input);

int main()
{
    // 전 코드가 한 군대로 돌릴 경우 : 나중에 관리하기 힘들어진다
    // 똑같은 연산을 여러번 수행할 경우 : 반복문을 쓸 수도 있지만, 전체 연산을 따로 지정해두고 연산을 지정하는 이름만 호출하는 편이 간단할 수 있다

    // C++의 핵심 : 함수(funtion, 기능 혹은 행동)
    // → 행동을 작성한 다음 행동을 이름으로 호출해서 수행시키겠다

    // 함수의 들어가는 것들 : 
    // → (변수와 마찬가지로) 함수에도 자료형이 있다
    // 함수에 자료형이 왜 있느냐 → 함수가 끝났을 때, 결과물이 발생할 수 있기 때문에
    // → (변수와 마찬가지로) 함수에도 함수의 이름이 필요하다

    // → 함수가 수행될 때, 어떻 조건에서, 혹은 어떤 재료(자료)를 가지고 수행되어야 하는지가 지정되어야 한다
    // → 다른 말로, 함수가 수행될 때 주어지는 재료 변수가 필요하다. 이 재료를 "매개변수"라고 한다

    // 함수를 도식으로 표현하면 : 
    // 자료혀 함수이름(매개변수)
    // { 수행될 코드 }

    // 작성된 함수를 사용하는 방법 : 함수의 이름을 호출하고 뒤에 ()를 붙이면 된다
    ShowNumber();

    // 함수를 main(){} 밑에 작성할 경우, 내용의 문제가 없더라도 실행에 오류가 생긴다
    // 이유 : 위에서부터 코드를 쭉 읽었을 때, 호출하는 시점에서(나중에 와야 함)코드의 존재를 아직 컴퓨터가 모르기 때문에
    // 그래서 존재해야 할 함수의 이름과 자료형과 매개변수만 맨 처음에 적어두고(예약) 나중에 진짜 코드를 작성
    // 예약만 했다고밑에 있는 함수 내용은 또 왜 컴퓨터가 아느냐? → 1. 코드의 내용이 메모리에 올라가기 때문에(즉 실제 실행은 메모리에서 처리)
    // 2. C++은 실행할 때 코드를 두 번 보기 때문에. 처음에 읽으면서 "문제 없다", "이런 코드가 있다"는 것만 확인하면 실행하는데 문제가 없다
    // 이렇게 함수를 맨 위에 예약하는 것을 함수를 선언한다고 한다(변수와 마찬가지)

    ShowThisNumber(555); // 매개변수가 있는 함수를 호출할 때는 반드시 지정된 매개변수를 넣어줘야 한다
    // 매개변수가 있는 함수는 호출할 때 매개변수를 다르게 넣으면 거기에 따라 코드 수행 혹은 결과도 달라진다

    Sum(111, 999); // 매개변수가 2개 이상 있으면 모든 매개변수를 넣어줘야 한다
    // 코드 작성에 따라서 수행 중에 눈에 띄는 결과가 나오지 않을 수도 있다

    // 대신, 함수는 그 결과물을 일종의 변수처럼 사용할 수도 있다(즉 함수 하나가 결과물로 대표되는 데이터 1개)

    std::cout << Sum(222, 1000) << std::endl; // Sum 함수를 사용해서 222와 1,000의 합을 하나의 숫자처럼 계산해서 쓴 것

    return 0;

    Print(100);

    // 함수를 사용할 때 추가로 생각할 점 1
    // std::cout << result << std::endl;
    // → 다른 함수에서 만들어진 변수는 함수 밖에서 쓸 수 없다

    // 함수를 사용할 떄 추가로 생각할 점 2
    // 함수에서 return을 사용하면, 그 때 생긴 결과를 컴퓨터는 최종 결과라고 생각한다
    // → 다른 말로, return이 실행되면 함수는 즉시 종료. 그 밑에 있는 코드는 실행x
    // → 또 다른 말로, 함수를 중간에 끊고 싶으면(반복문이라면 break가 나올 상황)return을 쓰면 된다
}

// 함수를 표현하는 가장 흔한 모양
int ShowNumber()
{
    // 함수에서 수행할 코드
    std::cout << 0 << std::endl;

    // 함수가 모두 끝난 후, 생기는 결과물이 return이라는 명령어로 작성된다
    return 0;

    std::cout << "헬로 월드" << std::endl;
}

// 위 함수는 매개변수를 쓰지 않은 함수.

// 매개변수를 사용하는 함수를 만들어보자
int ShowThisNumber(int _input)
// _input이라는 이름의 매개변수 1개를 사용하는 함수
{
    std::cout << _input << std::endl; // 재료로 받은 매개변수 _input을 cout으로 출력

    ShowNumber(); // 만들어진 함수 안에서, 다시 다른 함수를 호출해서 사용하는 것도 가능

    // *주의!
    // ShowThisNumber(777); // 함수 안에서, 자기 자신(=함수)을 또 호출하는 것도 가능하다
    // 단 올바르게 쓰지 않으면 무한 실행 지옥에 빠진다(꼭 필요하지 않으면 이렂 않는 편이 좋다)

    return 0; // 이 함수가 끝나면 0이라는 숫자를 컴퓨터가 받는다
}

int Sum(int _a, int _b)
// _a, _b라는 이름의 매개변수 2개를 사용하는 함수(함수를 작성할 때, 설정할 수 있는 매개변수의 개수에는 제한이 없다)
{
    // 함수 안에서 따로 변수를 만들 수도 있다
    int  result = _a + _b;
    return result; // return에는 정해진 값만 아니라, 변수가 쓰일 수도 있다
}

// 함수에는 매개변수가 없을 수도 있고, 필요에는 따라서는 결과물이 업을 수도 있다
// 함수에 결고가 있는 게 중요하지 않고, () 안에 있는 코드 자체를 수행하는 게 훨씬 중요한 겨웅 이렇게 만들 수 있다

// void : (주로 혹은 거의)함수에서만 사용되는 특수한 자료형. 뜻은 "자료형 없음"
void Print(int _input)
{
    std::cout << "이것은 출력 전용 함수입니다" << std::endl;
    std::cout << _input << std::endl;
    // void : return필요 없음
}