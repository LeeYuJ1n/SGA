#pragma once
#include <iostream>

// 여기서 헤더 내용을 작성

// 원칙적으로는 여기나 cpp나 똑같은 C++ 파일
// : cpp에서 할 수 있는 모든 코딩은 여기서도 할 수 있다
// .....main()만 빼고

// 그런데 main()이 cpp에서 작성되어 있고, 또 그래야 하기 때문에 관습적으로 cpp에서는 실제로 실행될 코드(함수)의 정의가 들어가고
// 헤더에서는 함수의 선언과, 전역변수 작성까지 이루어진다
// (대부분 그렇게 나누어서 코딩하기를 권장 : 실제로도 그렇게 나누면 유용)

// → 헤더에 코딩 싹 다 하면 사람이 실수를 자주 한다

// 헤더의 사용 사례

// 1. 함수를 선언하기
void PrintAmugona(); // 함수를 선언(내용 없이 이름만)
int Dutsem(int first, int second); // 함수 선언에는 매개변수까지는 포함 필요
float Paelsem(double first, double second); // 함수 자료형과 매개변수 자료형은 별개

// 2. 전역변수 작성
char munja[65] = "이 문자열은 길이가 깁니다"; // 변수 초기화(선언+할당) 가능
int a; // 변수 선언 가능
int b = 999;

// a = 10; // 변수 할당..... 불가능 (헤더라서가 아니라, {}, 즉 코드 수행부의 밖이라서)
// b = 111; // 변수 수정도 불가능

// 헤더에서 구조체도 작성하고, 구조체 변수도 선언 가능
// 구조체도 결국 자료형(의 집합)이니까 → 구조체 변수를 여기서 만들면 그것도 전역변수

struct HeaderStruct // 헤더에서 만든 구조체
{
	int a; // 구조체 안의 a는 밖의 a와는 다른 개체(호출도 이쪽은 변수명.a)
	int b;
	int c;
};
HeaderStruct hs; // 구조체를 사용한 변수(구조체 변수) : cpp에서 사용가능

// 3. (피할 수 있으면 피하면 좋지만...)함수의 정의
void SetVariables()
{
	a = 1111; // 함수 안에서는 변수 할당 가능
	b = 45678; // 수정도 가능

	// 이 헤더가 불러와질 때는 시점에 따라 어떤 기능이 포함될지가 불분명
	// 이 헤더에서 꼭 써야 하는 C++ 부가 기능이 있으면 헤더 안에서 확실하게 부여
	// 예를 들면, 아래 코드는 <iostream> 기능 혹은 비스한 C++기능이 꼭 필요
	// 따라서 이 헤더 파일 위쪽에 #include <iostream> 작성 필요
	std::cout << a << std::endl; // #include 없으면 이 코드가 에러
	std::cout << b << std::endl;
}