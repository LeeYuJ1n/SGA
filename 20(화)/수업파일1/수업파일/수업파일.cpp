#include <iostream>

int main()
{
    // 제어문 심화
    // 제어문 (if, for)의 특성
    // 또 다른 제어문 코드

    // if의 특성 : 가장 보편적인 조건문
    // → ()라는 방법을 통해서 조건을 지정한다
    // → 조건의 수를 개발자 마음대로 지정 가능
    // → 조건의 형태도 자유롭다, 혹은 모호해도 괜찮다
    // → 한 가지 조건에는 반드시 한 가지 결과만 나와야 한다는 제약
    // → 조건이 있으면 반드시 결과를 작성을 각각 해야 한다는 귀찮음

    // if와 다른 상황에서 사용할 수 있는, 다른 조건문 문법

    // "삼항연산자 식" : 연산자와 전체 코드가 한 세트인 "조건문"

    bool result; // 삼항연산자에서 자주 선택되는 변수 작성
    float resultNumber; // 결과가 저장될 변수
    resultNumber = (1 + 1 == 2) ? 3.14f : 9.99f;
    std::cout << resultNumber << std::endl;

    // 삼항연산자 사용법 : 결과변수 : (조건1) ? (결과1) : (결과2);
    // 결과변수 : 해당 조건문의 최종 결과가 저장될 변수(bool이 자주 선택되지만 굳이 bool일 필요는 없다, 굳이 bool일 필요는 없다)
    // (조건1) : 최종 결과의 참 / 거짓 여부를 가리기 위한 조건
    // ? (조건1 뒤에 기호) : 이 조건이 맞는지 아닌지를 가리라는 연산자(삼항연산자)
    // (결과1) : (조건1)이 참일 때 적용되어야 할 결과
    // (결과1) 다음에 오는  : 기호 : (결과1)과 (결과2)를 나누는 표시
    // (결과2) : (조건1)이 거짓일 때 적용되어야 할 결과

    // 조건의 수가 하나밖에 지정될 수 없지만, 결과의 형태가 참 / 거짓으로 깔끔한 경우
    // if에 비하면 월등히 빠른 코드

    // 다른 상황에서 사용 가능한 조건문 코드

    // switch : 하나의 변수를 조건처럼 사용하는 조건문
    /*
    int CNO = 2; // case number : 사례번호
    float fl; // switch에서 사용 불가능
    char a = 'a'; // switch에서 사용 가능
    
    switch(CNO)
    {
    case 0: // CNO가 0일 경우에 아래 코드를 수행하라는 뜻
        std::cout << "가위" << std::endl;
        break; // 이 코드를 보면 이것보다 더 밑에 있는 코드는 수행하지 말란 뜻

    case 1:
        std::cout << "식칼" << std::endl;
        break;

    case 2:
        std::cout << "식기세척기" << std::endl;
        break;
        

    case 3:
        std::cout << "공기청정기" << std::endl;
        break;

        // switch문이라도 case 하나하나마다 대응되지 않는 예의는 존재
        // 그런 예외 상황을 switch에서는 "기본 사례"라고 지칭

    default: // 기본 사례에 사용되는 코드
        std::cout << "가정용 도구 모음집" << std::endl;
        break;
    }*/

    // 조건문의 특징 : 조건문 안에 다른 조건문 사용 가능
    // → switch도 조건문 : if안에 switch 가능, switch안에 if 가능
    // → switch안에서 또 switch 가능

    // 스위치 곧바로 실습

    // → CNO의 사례를 9까지 만들어보기
    // → game이라는 int를 만들어서, 0 ~ 9까지 case를 구현하고 각각 cout으로 자기가 좋아흐는 게임 제목을 출력을 해봅시다

    int inputGameNumber;
    std::cout << "숫자를 입력해주세요" << std::endl;
    std::cin >> inputGameNumber;

    switch (inputGameNumber)
    {
    case 1:
        std::cout << "로스트아크" << std::endl;
        break;

    case 2:
        std::cout << "오버워치" << std::endl;
        break;

    case 3:
        std::cout << "발로란트" << std::endl;
        break;

    case 4:
        std::cout << "클로저스" << std::endl;
        break;

    case 5:
        std::cout << "붕괴 : 스타레일" << std::endl;
        break;

    case 6:
        std::cout << "카스온라인" << std::endl;
        break;

    case 7:
        std::cout << "레프트 4 데드 2" << std::endl;
        break;

    case 8:
        std::cout << "버블파이터" << std::endl;
        break;

    case 9:
        std::cout << "메이플스토리" << std::endl;
        break;
    }


    // switch의 특징
    // → 조건을 하나밖에 안 본다(숫자든, bool이든...)
    // → 조건의 형태를 무조건 명확하게 구분할 수있어야 한다
    // (다른 표현으로, "int"로 표현할 수 있는 자료형만 조건으로 쓸 수 있다)
    // (또 다른 표현으로, float 사용 불가, char는 문자 코드에서 대응하는 일종의 암호 / 변환 표현이라서 사용 가능(=문자는 숫자로 c++에서 변환 가능)

    // → break;가 없으면 조건이 맞든 안 맞든 밑에 있는 다른 코드를 모두 실행
    // → 이 조건문은 case로 시작점만 나누지, "끝"을 나누지 않는다
    // → case 뒤에 오는 break는 진짜 필수는 아니고, 다른 case의 코드를 실행하지 않기 위한 일종의 안전장치
    // → 반대로 case 1일 때도, case 2일 때도 똑같이 실행되어야 하는 코드가 있다면, 고의로 break를 빼고 복수 조건에 대한 공통 결과를 작성해줄 수도 있다

    // → 가장 큰 특징 : 같은 코드 길이라면 if보다 빠르다(조건을 하나밖에 안 봐서)

    // 따라서 ...

    // 조건이 많거나 애매하다(크기 비교라든가, 소수라든가...)
    // 결과가 조건마다 정확하게 나뉘어야 한다
    // → 이런 경우에는 if문이 가장 좋다(조건문에서 가장 많은 경우)

    // 조건 자체는 하나로 한정된 경우
    // 이 조건문에서 경우의 수가 정확하게 나와있는 경우(case 1, case 2...)
    // → 이런 경우라면 switch가 더 좋다

    // 조건도 하나뿐이고, 결과도 하나밖에 볼 필요가 없다
    // → ...이런 경우에도 if문이나 switch가 사실 더 좋다(나중에 코드 확장하기도 좋고, 요즘은 이쪽이 사실 더 빠르다)
    // → 하지만, 코드의 형태는 삼항연산자 식이 더 간단하게 나올 수도 있다

    // 물론 특화의 문제이므로, if든 switch든 문법만 충족하면 자유롭게 써도 된다
}