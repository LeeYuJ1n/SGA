#include <iostream>

int main()
{
	// 삼중 이상 배열을 포인터로 구현했을 때, 메타 데이터를 사용한다고 해도 기본 원리는 똑같습니다.
	// 각 층을 위한 데이터 분석표를 만들고, 다시 층에 대한 데이터를 묶어서 건물의 데이터 분석표를 만들면 돼요.
	// 다만, "건물의 데이터 분석표"를 만든다는 부분이 한 마디로 표현될 경우...
	// 변수 하나로 다 되는 거 아닌가? 로 접근이 될 수도 있기에, 예제를 추가로 보여드리고자 합니다.

	// 요점은,
	// "건물 반복문을 돌리고 있을 때, *반복문의 i와 j만 써도* 접근할 수 있도록 배열들을 만들어줘야 한다!!"
	// ...는 겁니다. 따라서 "건물의 메타데이터 하나만 만들면 된다"는 표현은 말로는 이렇지만
	// 실제로는 하나 이상의 변수를 만들어서 따로 다뤄주는 편이 좋을 수도 있습니다.

	// * 메타 데이터의 개념과 활용법을 이해하기 위한 예제이기도 합니다만, 실제론 이 정도까지 복잡한 구조가 되면
	//   따로 프로그래밍 언어에서 제공된 특수한 배열 기능 등을 써서 쉽게 데이터를 관리하는 일이 더 흔합니다.
	//   코딩으로 메타 데이터를 직접 제작하는 경우는 대체로 2차 배열까지가 많으니...
	//   본 예제는 야심과 학구열을 달래는 용도로 쓰시고 ㅎㅎㅎ 행여 헷갈리셔도 낙담하지 마세요. 필수 아닙니다.

	// * 건물 배열 작성 부분이 핵심입니다.

	// --- 1층 ------------------------

	//1층을 배열로 (1중 배열 셋과 포인터를 쓴 2중 배열)
	int arr11[5] = { 1, 2, 3, 4, 5 };
	int arr12[6] = { 1, 2, 3, 4, 5, 6 };
	int arr13[7] = { 1, 2, 3, 4, 5, 6, 7 };

	int* aarr1[3] = { arr11, arr12, arr13 };

	// 1층을 구성하는 배열을 위한 메타데이터
	int length1[3] = { 5, 6, 7 };

	//----- 2층 ------------------------

	//2층을 배열로 (1중 배열 셋과 포인터를 쓴 2중 배열)

	int arr21[5] = { 1, 2, 3, 4, 5 };
	int arr22[6] = { 1, 2, 3, 4, 5, 6 };
	int arr23[7] = { 1, 2, 3, 4, 5, 6, 7 };
	int arr24[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };

	int* aarr2[4] = { arr21, arr22, arr23, arr24 };

	// 2층을 구성하는 배열을 위한 메타데이터
	int length2[4] = { 5, 6, 7, 8 };

	//------- 건물 (1층 + 2층) -----------------------

	// 1층과 2층을 합한 "건물"의 데이터 (3중 배열, 3중 포인터)
	int** aaarr[2] = { aarr1, aarr2 };

	// 건물의 각 층에 몇 "줄"이 있는지를 파악하기 위한 2차 메타데이터
	// 층의 크기만 보면 되니까 1중 배열(숫자의 배열)로 충분
	int lengthA[2] = { 3, 4 };

	// 위에 만든 lengthA와 별개로, 각 "줄(1중 배열)"의 메타 데이터를
	// 수집하기 위해 만든 1차 메타 데이터의 집합
	// 메타 데이터가 된 배열의 다시 배열이기 때문에 2중 배열
	int* lengthPA[2] = { length1, length2 };
	
	// ------ 출력 ------------------------

	for (int i = 0; i < 2; ++i) // 전체 건물, 층마다 반복문
	{
		std::cout << i + 1 << "층" << std::endl << std::endl;

		for (int j = 0; j < lengthA[i]; ++j)
		{
			//각 층마다 줄 수만큼 반복. 2차 메타 데이터로 접근

			for (int k = 0; k < lengthPA[i][j]; ++k)
			{
				//각 줄마다 칸만큼 반복... 1차 메타 데이터의 총집합으로 접근

				std::cout << aaarr[i][j][k] << "\t";
			}
			std::cout << std::endl;
		}
		std::cout << std::endl << std::endl;
	}
}