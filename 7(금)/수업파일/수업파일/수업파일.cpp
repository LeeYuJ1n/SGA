#include <iostream>

int main()
{
    // 지정 상수

    // 상수의 정의 : 그냥 그렇게 정해진 값(항상, 혹은 그런 값)
    // 컨스턴스, 컨스턴트(밸류) 등을 불리는데, constant라고 자주 지칭된다

    // 상수의 종류 : 명시 상수, 지정 상수(리터럴 컨스턴트, 심벌릭 컨스턴트)

    // 명시 상수(리터럴 컨스턴트, 리터럴 상수) : "그렇게 명시된" 상수, 혹은 영어 뜻에 따라 "말 그대로" 상수
    // 다른 말로 "이게 상수가 아니면 뭐가 상수냐"

    1; // ← 명시 상수
    'a'; // ← 명시 상수

    // 즉 완전히 합의된 체계 하의 기호, 데이터, 숫자, 연산식 등이 모두 명시 상수

    // 지정 상수(심벌릭 상수) : 작성은 변수로 했는데, 개발자가 이건 상수라고 지정한(symbolize) 상수

    // → 지정 상수는 코드로 작성을 해서 컴퓨터에게 인식시켜야 한다

    // 지정 상수 코드 작성법 : 변수를 작성할 때, 자료형 앞에 한 칸 띄우고 const 입력

    const int a = 1000;
    const float b = 4444.4f;
    const char c = 'X';

    // 지정 상수 사용법 : 평범하게 호출하면 된다
    std::cout << a << std::endl;
    std::cout << b << std::endl;
    std::cout << c << std::endl;

    std::cout << (float)a + b << std::endl; // 형변환 및 연산에 사용도 얼마든지 할 수 있다

    // 그런데 뭐가 다르냐 : 상수이기 때문에 수정이 더 이상 안 된다

    // a = 2000; // 한 번 작성된 상수는 수정이 안 된다

    // 심벌릭 상수는 수정이 안 되기 때문에, 변수를 선언한 다음에 값을 주는 것도 힘들다

    // const double d; // ← 선언(이미 여기서 오류. 여기서 값이 없으면 영원이 없으니까)
    // d = 999.999; // 수정 불가

    // 요약 : 변수 작성 앞에 const를 붙이면 그 변수는 영원불변

    // -------------------------------

    // 상수의 별도 활용법 : 상수를 이용한 문자열 작성

    const char* amugona = "김수한무거북이와두루미가북한산에서가가ㅏ가가가가ㅏ가각ㄱ가가ㅏ가가가가"; 
    // 지정 상수로 문자열을 만들면 작성 시에 길이의 제한을 생각하지 않고 작성해도 괜찮다(컴퓨터가 알아서 메모리를 잡아준다)
    // char의 포인터니까 어차피 배열이나 같다 = 문자열이 성립
    // 단 상수니까 작성 후에 수정은 못 한다

    std::cout << amugona << std::endl;
}