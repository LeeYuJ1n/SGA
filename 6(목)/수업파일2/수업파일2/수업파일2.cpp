#include <iostream>

// 캐릭터용 공용 구조체
struct CHARA
{
    int hp;
    int atk;
};

// 캐릭터용 전투 함수
void ATK(CHARA* one, CHARA* two)
{
    // 여기서 구조체 변수에 포인터를 적용해서 하위 변수를 조작
    
    //*one.hp -= *two->atk; // ← 이러면 오류. *이 목표하는 범위를 컴퓨터가 정확히 못 받은 것

    // 이 때 해결방법
    // 1. (본 강의 때 배운) 범위 지정
    // (*one).hp -= (*two).atk; // *와 ()의 정의를 이용해서 사전적으로 정확한 연산
    // 그러나 사실 구조체에서 이 방법은 잘 안 쓴다

    // 2. 전용 연산자를 사용 : 이쪽을 더욱 자주 사용
    one -> hp -= two -> atk;

    // 위 코드에 쓰인 연산자 -> : 접근 연산자(액세서)
    // 포인터가 있을 때 포인터 에 하위 요소들이 같이 있을 때, 그 하위 요소에 접근하기 위한 연산자
    // 포인터에게 쓰는 것이기 때문에, 포인터 변수를 값으로 호출하지 않고 그대로 사용할 것
}

int main()
{
    // 메인에서 바로 확인

    // 캐릭 생성
    CHARA chara1;
    CHARA chara2;

    // 캐릭터에게 속성을 각각 초기화
    chara1.hp = 100;
    chara1.atk = 10;

    chara2.hp = 200;
    chara2.atk = 20;

    // 공격 함수를 불러서 매개변수로 두 캐릭터의 주소를 넣자
    ATK(&chara1, &chara2); // 캐릭터2가 캐릭터 1을 공격한다(코딩 내용상 뒤에 적힌 매개변수가 진짜 공격자)
    ATK(&chara2, &chara1); // 1이 2를 공격(두 매개변수 위치를 바꿈으로서 역할을 공수 교체)

    // 결과
    std::cout << "캐릭터 1 체력 : " << chara1.hp << std::endl;
    std::cout << "캐릭터 2 체력 : " << chara2.hp << std::endl;
}
