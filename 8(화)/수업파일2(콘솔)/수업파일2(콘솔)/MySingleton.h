#pragma once

using namespace std;

class MySingleton
{
	// 싱글턴을 구성하는 요소들
private:
	// 생성자를 private으로 만들자
	MySingleton();

	// 소멸자도
	~MySingleton();

	// → 왜 생성자를 밖에서 부르지 못하도록 하는가?
	//   → 정적인 클래스의 인스턴스를 만들려는데 여러 번 만들어봤자 의미 없으니까
	//     특정한 조건이 갖춰질 때 딱 한번만 (그것도 이 클래스 안에서) 부르려고 생성자를 private으로 

	// 만들어진 인스턴스를 (다른 곳에서) 별도의 선언 없이도 호출한다고 쳤을 때
	// 정확한 데이터를 주기 위한 실체가 필요하다 (GiveMeDynamic 함수에서 number 호출이 안 됐던 것을 상기)

	// 실체 전달용 포인터 인스턴스
	static MySingleton* instance; // 자기 클래스의 포인터 인스턴스를 미리 만들어둔 것
	// * instance를 여기서 처음 선언을 하면 값이 nullptr도 아닌 완전한 '무'의 값이 들어간다
	// * 위 instance의 값을 cpp 파일에서 nullptr로 한 번 초기화를 해두는 것이 좋다

	// -------------------------------------

	// 매개변수 있는 생성자(테스트)
	// 만들 수는 있지만, 싱글턴에서는 큰 도움을 받지 못한다
	// 인스턴스가 만들어지는 딱 한 번만 매개변수를 받게 되는데
	// 그나마도 만들어진 후 계속 수정되며넛 값이 갱신될 테니까

	MySingleton(int _x, int _y) // ← 많이 안 쓴다
	{
		x = _x;
		y = _y;
	}
	// 그래서 싱글턴을 만들 때는 생성자는 상대적으로 가볍게 만드는 경우가 많다
	// → 웬만하면 수정 안 될 가장 중요한 핵심 데이터, 혹은 private 변수 등만 매개변수를 받거나
	//   그나마 그냥 기본 생성자 안에서 디폴트 값을 정하는 경우가 많다

	// 그럼에도 불구하고 싱글턴에 있는 데이터에 대한 초기화가 꼭 필요한 경우가 있다면?
	// public에 그냥 함수 하나 따로 만들어서 거기서 단체 초기화를 시켜버리면 된다
	// → 이니시에이터를 쓰자

	// → 보통은 이니시에이터는 위험하다 (대부분의 변수에 자유롭게 접근할 수 있도록 한다)
	//   더불어서 귀찮다 (한 번에 칠 타자가 많다)

	// → 하지만 싱글턴이라면 어차피 생성된 후에 한 번은 싹 데이터에 접근도 해야 되는데
	//   어차피 싱글턴이면 어디서든 접근하고 호출할 텐데

	// → 꼭 보안이 필요한 (디폴트값 한 번 정해지면 수정이 안 될) 데이터만  보호하고
	//   나머지는 이니시에이터에서 값을 할당하면 된다

	// -------------------------------------

public:
	// 밖에서 이 인스턴스를 가져오기 위한 함수
	// Get : 싱글턴의 외부에서 정적 인스턴스를 불러오기 위해서 자주 선택하는 이름의 사례 중 하나
	// 다른 이름 : Instance, I, i, S 등을 사용하기도 한다
	// 이 함수도 static으로 작성
	// 이유 1 : 굳이 여러 개의 메모리가 필요하지 않으니까
	// 이유 2 : static이 아닌 함수는 static 변수를 반환하지 못할 수 있다
	static MySingleton* Get()
	{
		// static 함수는 헤더에서 정의까지 해치운다 (템플릿처럼)
		// 내용을 정의
		
		// 1. 현재 인스턴스가 지정된 것이 없다면 (아무런 생성 전적이 없었다면)
		if (instance == nullptr)
		{
			// 2. 자기 자신의 인스턴스를 생성합니다
			instance = new MySingleton();
			
			// 매개변수가 있을 경우, (인스턴스는 어차피 하나뿐이어야 하니까)
			// 매개변수 있는 생성자만 써야 된다
			// instance = new MySingleton(1, 1);
			// 그런데 이렇게 매개변수 있는 생성자를 그대로 쓰려고 할 경우? (=고정 값)
			// 매개변수가 미리 정해져 있을 경우 →  어차피 나주엥 또 수정될 건데 의미 있을까요?

			// Get에서 매개변수를 받아오려고 하면?
			// instance = new MySingleton(_x, _y);
		}
		
		// else 없이 코드를 짜도 되고, else가 있을 경우 아래 코드를 if 안에 추가
		// → instance가 존재한다면 (혹은 방금 만들었다면) 그 결과를 컴퓨터에게 전달

		return instance;
	}

	void Init(int _x, int _y); // Init : initiating의 첫 네 글자, "초기화" 기능을 작성할 때 자주 선택하는 이름
	// 간이 확인용 public 데이터 하나

	void Add(int _x, int _y);
	void Sub(int _x, int _y);
	void Mult(int _x, int _y);
	void Div(int _x, int _y);

	int x, y, result;

	// ---------------------------------------------

	// 다 쓴 싱글턴이 있다 (웬만하면 그런 경우가 없는 편이 좋지만)
	// 그 때는 instance를 지우는 것도 좋을지도

	void Delete();
};

