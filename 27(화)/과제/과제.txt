● 비트 연산자
1. 비트 연산자란?
ㆍ비트 연산자는 비트(bit) 단위로 논리 연산을 할 때 사용하는 연산자입니다. 또한, 비트 단위로 전체 비트를 왼쪽이나 오른쪽으로 이동시킬 때도 사용합니다

2. 주요 비트 연산자	
	└ [ AND 연산자 ] : 두 비트가 모두 1일 때만 즉 참일 때만 결과가 1(참)이 되며, 그 외의 하나라도 0(거짓)일 경우 결과는 0(거짓)이 된다
	└ [ OR 연산자 ] : 두 비트중 하나 이상이 1(참)이면 결과는 1(참)이 되며, 모두가  0(거짓)일 경우에만 결과는 0(거짓)이 된다
	└ [ XOR 연산자 ] : 두 비트가 서로 다를 때 즉 A가 1(참)이고 B가 0(거짓)일 경우에만 1(참)이라는 결과가 나오면 두 비트가 1(참)이거나 0(거짓)일 경우 결과는 0(거짓)으로 나온다
	└ [ NOT 연산자 ] : 비트의 반전시킵니다. 예를 들어 A라는 비트가 1(참)이면 반전되어, 결과는 0(거짓)으로 나오게 됩니다

● 시프트 연산자
1. 시프트 연산자란?
ㆍ비트 단위로 값을 이동시키는 연산자입니다. 주로 정수형 변수에 대해 사용되며, 이진수로 표현된 값을 왼쪽이나 오른쪽으로 이동시킨입니다.
또한 논리적 및 산숙적인 효과를 내기 위해 활용할 수도 있습니다

2. 시프트 연산자의 두 가지 유형
	└ [ 왼쪽 시프트 연산자 ] : 기호는 "<<"이며 피연산자의 비트를 왼쪽으로 이동시킵니다. 이동한 비트 자리는 0으로 채워지며, 왼쪽 시프트 연산자 같은 경우는 주로 2를 곱하는 효과를 가졌습니다.(사용하는 형태 : a << b)
	└ [ 오른쪽 시프트 연산자 ] : 기호는 ">>"이며 피연산자의 비트를 오른쪽으로 이동시킵니다. 이동한 비트 자리는 부호 비트로 채워지며, 오른쪽 시프트 연산자 같은 경우 2로 나누는 효과를 가졌습니다(사용하는 형태 : a >> b)

● 이동 연산자
1. 이동 연산자란?
ㆍ데이터나 객체의 이동을 나타내는 연산자이며, 이동 연산자는 일반적으로 메모리나 리소스를 소비하지 않고 빠르게 데이터를 이동시킬 수 있는 방법을 제공합니다